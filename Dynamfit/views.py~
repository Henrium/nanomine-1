from django.shortcuts import render, render_to_response, RequestContext
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from .forms import *

import os, random, getpass
from Dynamfit.models import Document
from Dynamfit.forms import DocumentForm
from time import gmtime, strftime
from operator import itemgetter

import time, math
import numpy as np


# Create your views here.

ParentDir = '/home/NANOMINE/ONR/DynamFit_web/'


#def upload(request):
#	# Handle file upload
#	global WorkingDir, timestamp, datafile, weight, std, NumEle, mtd
 #       timestamp = strftime("%Y%m%d%H%M%S", gmtime())
#
 #       if len(request.POST) != 0: # when there is actual inputs
#		datafile = request.POST.get('datafile')
#		weight = request.POST['weight']
#		std = request.POST['std']
#		NumEle = request.POST['NumEle']
#		mtd = request.POST['mtd']
#		print datafile
#		print weight
#		print std
#		print NumEle
#		print mtd

	
#		return render_to_response("Dynamfit_new.html",locals(),context_instance=RequestContext(request))

#	return HttpResponseRedirect(reverse('Dynamfit.views.runmodel'))

def home(request):
	# Handle file upload
	if request.user.is_authenticated():
		global WorkingDir, timestamp, datafile, weight, std, NumEle, mtd, link2result
		timestamp = strftime("%Y%m%d%H%M%S", gmtime())
	

		if request.method == 'POST':

			# run model to nuhup
			f = open('./Dynamfit/RunCount.num', 'r+')
			count = f.readlines()
			print 'total count so far is:'
			print count
			f.seek(0)
			newcount = int(count[0]) + 1
			f.write(str(newcount))
			f.close()

			WorkingDir = ParentDir + timestamp + '_' + str(int(count[0]))
			if not os.path.exists(WorkingDir):
				os.makedirs(WorkingDir)
				print '---------------------------Created working folder'
	
			f = open('./Dynamfit/workingdir.str', 'w+')
			f.write(WorkingDir)
			f.close()

			# Copy source code to working dir
			# os.system('cp /home/NANOMINE/ONR/Dynamfit_web/a.out '+WorkingDir)
			# os.system('cp /home/NANOMINE/ONR/Dynamfit_web/start.py '+WorkingDir)
			os.system('cp /home/NANOMINE/ONR/DynamFit_web/code/* '+WorkingDir)
			os.system('cp ./Dynamfit/workingdir.str '+WorkingDir)

			# Create new HTML in apache path to display modeling process
			ApacheCaseDir = '/var/www/html/nanomine/Dynamfit/'+timestamp+'_'+str(int(count[0]))	
	
			# Link of Apache page
			link2result = 'http://puma.mech.northwestern.edu/nanomine/Dynamfit/'+timestamp+'_'+str(int(count[0]))
			if not os.path.exists(ApacheCaseDir):
				os.makedirs(ApacheCaseDir)
				print '----------------Created user case Apache folder'
				os.system('cp '+WorkingDir+'/*.word '+ ApacheCaseDir)





			form = DocumentForm(request.POST, request.FILES)
			if form.is_valid():
				newdoc = Document(docfile = request.FILES['docfile'])
				newdoc.save()


				datafile = request.POST.get('datafile')
				weight = request.POST['weight']
				std = request.POST['std']
				NumEle = request.POST['NumEle']
				mtd = request.POST['mtd']
				print datafile
				print weight
				print std
				print NumEle
				print mtd

				cpfile = 'cp ./Dynamfit/media/'+datafile+'.X_T '+ WorkingDir
				print cpfile			
				os.system(cpfile)
	
				# run model
				call_start = "python start.py %s %s %s %s %s" %(datafile, weight, std, NumEle, mtd)
				toPath = 'cd '+WorkingDir+';'
				os.system(toPath + call_start)


				time.sleep(3)
				os.system('cp '+WorkingDir+'/*.XFF '+ ApacheCaseDir)
				os.system('cp '+WorkingDir+'/*.XPR '+ ApacheCaseDir)
				os.system('cp '+WorkingDir+'/*.XTF '+ ApacheCaseDir)




		    		return HttpResponseRedirect(reverse('Dynamfit.views.home'))

		else:
			print 'FORM NOT VALID'
			form = DocumentForm() # A empty, unbound form

		# Load documents for the list page
		documents = Document.objects.all()

		# Render list page with the documents and the form
		return render(request,'Dynamfit_new.html', {'form': form},
			context_instance=RequestContext(request))
	else:
		return redirect('/login')

def runmodel(request):
	if request.user.is_authenticated():

		XFF = link2result + '/' + datafile + '.XFF'
		XPR = link2result + '/' + datafile + '.XPR'
		XTF = link2result + '/' + datafile + '.XTF'
	
		return render_to_response("DynamfitRun.html", 
					{'XFF_link': XFF, 'XPR_link': XPR, 'XTF_link': XTF},
					context_instance=RequestContext(request))
	else:
		return redirect('/login')

